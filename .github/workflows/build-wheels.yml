name: Build Wheels

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      version:
        default: 'v0.1.18'
        required: true
        type: string
      cpu:
        description: 'Build CPU-only wheels as well? 0/1 Does not use config or exclude.'
        default: '0'
        required: false
        type: string

permissions:
  contents: write

jobs:
  define_matrix:
    name: Define Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Define Job Output
        id: set-matrix
        run: |
          $matrix = @{
              'os' = 'ubuntu-22.04', 'windows-latest'
              'pyver' = '3.11', '3.12'
              'cuda' =  '12.1.1', '12.2.2'
          }
          
          $matrixOut = ConvertTo-Json -Compress $matrix   # ConvertTo-Json $matrix -Compress
          Write-Output ('matrix=' + $matrixOut) >> $env:GITHUB_OUTPUT
          
  build_wheels:
    name: Build Wheel ${{ matrix.os }} ${{ matrix.pyver }} ${{ matrix.cuda }}
    needs: define_matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.define_matrix.outputs.matrix) }}
    defaults:
      run:
        shell: pwsh
    env:
      CUDAVER: ${{ matrix.cuda }}
      PCKGVER: ${{ github.event.inputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'choronz/AutoAWQ'
          ref: ${{ github.event.inputs.version }}
          submodules: 'recursive'
          
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.pyver }}
        
      - name: Setup Mamba
        uses: conda-incubator/setup-miniconda@v2.2.0
        with:
          activate-environment: "build"
          python-version: ${{ matrix.pyver }}
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          add-pip-as-python-dependency: true
          auto-activate-base: false
          
      - name: VS Integration Cache
        id: vs-integration-cache
        if: runner.os == 'Windows'
        uses: actions/cache@v3.3.2
        with:
          path: ./MSBuildExtensions
          key: cuda-${{ matrix.cuda }}-vs-integration
          
      - name: Get Visual Studio Integration
        if: runner.os == 'Windows' && steps.vs-integration-cache.outputs.cache-hit != 'true'
        run: |
          $x = $env:CUDAVER
          $links = (Invoke-RestMethod 'https://raw.githubusercontent.com/choronz/cuda-toolkit/master/src/links/windows-links.ts').Trim().split().where({$_ -ne ''})
          for ($i=$q=0;$i -lt $links.count -and $q -lt 2;$i++) {if ($links[$i] -eq "'$x',") {$q++}}
          Invoke-RestMethod $links[$i].Trim("'") -OutFile 'cudainstaller.zip'
          & 'C:\Program Files\7-Zip\7z.exe' e cudainstaller.zip -oMSBuildExtensions -r *\MSBuildExtensions\* > $null
          Remove-Item 'cudainstaller.zip'
          
      - name: Install Visual Studio Integration
        if: runner.os == 'Windows'
        run: |
          $y = (gi '.\MSBuildExtensions').fullname + '\*'
          (gi 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Microsoft\VC\*\BuildCustomizations').fullname.foreach({cp $y $_})
          $cupath = 'CUDA_PATH_V' + $env:CUDAVER.Remove($env:CUDAVER.LastIndexOf('.')).Replace('.','_')
          echo "$cupath=$env:CONDA_PREFIX" >> $env:GITHUB_ENV
          
      - name: Install Dependencies
        run: |
          $cudaVersion = $env:CUDAVER
          $cudaChannels = ''
          $cudaNum = [int]$cudaVersion.substring($cudaVersion.LastIndexOf('.')+1)
          while ($cudaNum -ge 0) { $cudaChannels += '-c nvidia/label/cuda-' + $cudaVersion.Remove($cudaVersion.LastIndexOf('.')+1) + $cudaNum + ' '; $cudaNum-- }
          mamba install -y 'cuda' $cudaChannels.TrimEnd().Split()
          if (!(mamba list cuda)[-1].contains('cuda')) {sleep -s 10; mamba install -y 'cuda' $cudaChannels.TrimEnd().Split()}
          if (!(mamba list cuda)[-1].contains('cuda')) {throw 'CUDA Toolkit failed to install!'}
          python -m pip install build wheel
          
      - name: Build Wheel
        run: |
          $packageVersion = [version]$env:PCKGVER.TrimStart('v')
          $cudaVersion = $env:CUDAVER.Remove($env:CUDAVER.LastIndexOf('.')).Replace('.','')
          $env:CUDA_PATH = $env:CONDA_PREFIX
          $env:CUDA_HOME = $env:CONDA_PREFIX
          if ($IsLinux) {$env:LD_LIBRARY_PATH = $env:CONDA_PREFIX + '/lib:' + $env:LD_LIBRARY_PATH}
          $env:VERBOSE = '1'
          $env:CMAKE_ARGS = '-DLLAMA_CUBLAS=on -DCMAKE_CUDA_ARCHITECTURES=89'
          if ($packageVersion -gt [version]'0.2.13') {$env:CMAKE_ARGS = "-DLLAMA_NATIVE=off -DLLAMA_CUDA_FORCE_MMQ=ON $env:CMAKE_ARGS"}  # -DLLAMA_CUDA_F16=ON
          $buildtag = "+cu$cudaVersion"
          if ($packageVersion -lt [version]'0.2.0') {
            $env:FORCE_CMAKE = '1'
            python -m build --wheel -C--build-option=egg_info "-C--build-option=--tag-build=$buildtag"
          } else {
            $initpath = Join-Path '.' 'llama_cpp' '__init__.py' -resolve
            $initcontent = Get-Content $initpath -raw
            $regexstr = '(?s)(?<=__version__ \= ")\d+(?:\.\d+)*(?=")'
            $regexmatch = [Regex]::Matches($initcontent,$regexstr)
            if (!($regexmatch[0].Success)) {throw '__init__.py parsing failed'}
            $newinit = $regexmatch[0].Result(('$`' + '$&' + $buildtag + '$'''))
            New-Item $initpath -itemType File -value $newinit -force
            python -m build --wheel
          }
          
      - name: Upload files to a GitHub release
        id: upload-release
        uses: svenstaro/upload-release-action@2.7.0
        continue-on-error: true
        with:
          file: ./dist/*.whl
          tag: ${{ github.event.inputs.version }}
          file_glob: true
          make_latest: false
          overwrite: true
        
      - uses: actions/upload-artifact@v3
        if: steps.upload-release.outcome == 'failure'
        with:
          name: ${{ github.event.inputs.version }}
          path: ./dist/*.whl

#  build_cpu:
#    name: Build CPU-only Wheels
#    needs: build_wheels
#    if: inputs.cpu == '1'
#    uses: ./.github/workflows/build-wheels-cpu.yml
#    with:
#      version: ${{ inputs.version }}
